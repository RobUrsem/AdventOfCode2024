package puzzle

import (
	"testing"
)

func TestStones(t *testing.T) {
	testCases := []struct {
		name     string
		input    []int
		expected [][]int
	}{
		{
			name:  "rule 1",
			input: []int{0},
			expected: [][]int{
				{1},
			},
		},
		{
			name:  "rule 2",
			input: []int{12},
			expected: [][]int{
				{1, 2},
			},
		},
		{
			name:  "rule 2 - leading zeros",
			input: []int{1000},
			expected: [][]int{
				{10, 0},
			},
		},
		{
			name:  "expand a zero",
			input: []int{0},
			expected: [][]int{
				{1},
				{2024},
				{20, 24},
				{2, 0, 2, 4},
				{4048, 1, 4048, 8096},
				{40, 48, 2024, 40, 48, 80, 96},
				{4, 0, 4, 8, 20, 24, 4, 0, 4, 8, 8, 0, 9, 6},
				{8096, 1, 8096, 16192, 2, 0, 2, 4, 8096, 1, 8096, 16192, 16192, 1, 18216, 12144},
				{80, 96, 2024, 80, 96, 32772608, 4048, 1, 4048, 8096, 80, 96, 2024, 80, 96, 32772608, 32772608, 2024, 36869184, 24579456},
				{8, 0, 9, 6, 20, 24, 8, 0, 9, 6, 3277, 2608, 40, 48, 2024, 40, 48, 80, 96, 8, 0, 9, 6, 20, 24, 8, 0, 9, 6, 3277, 2608, 3277, 2608, 20, 24, 3686, 9184, 2457, 9456},
				{16192, 1, 18216, 12144, 2, 0, 2, 4, 16192, 1, 18216, 12144, 32, 77, 26, 8, 4, 0, 4, 8, 20, 24, 4, 0, 4, 8, 8, 0, 9, 6, 16192, 1, 18216, 12144, 2, 0, 2, 4, 16192, 1, 18216, 12144, 32, 77, 26, 8, 32, 77, 26, 8, 2, 0, 2, 4, 36, 86, 91, 84, 24, 57, 94, 56},
				{32772608, 2024, 36869184, 24579456, 4048, 1, 4048, 8096, 32772608, 2024, 36869184, 24579456, 3, 2, 7, 7, 2, 6, 16192, 8096, 1, 8096, 16192, 2, 0, 2, 4, 8096, 1, 8096, 16192, 16192, 1, 18216, 12144, 32772608, 2024, 36869184, 24579456, 4048, 1, 4048, 8096, 32772608, 2024, 36869184, 24579456, 3, 2, 7, 7, 2, 6, 16192, 3, 2, 7, 7, 2, 6, 16192, 4048, 1, 4048, 8096, 3, 6, 8, 6, 9, 1, 8, 4, 2, 4, 5, 7, 9, 4, 5, 6},
			},
		},
		{
			name:  "1",
			input: []int{125, 17},
			expected: [][]int{
				{253000, 1, 7},
				{253, 0, 2024, 14168},
				{512072, 1, 20, 24, 28676032},
				{512, 72, 2024, 2, 0, 2, 4, 2867, 6032},
				{1036288, 7, 2, 20, 24, 4048, 1, 4048, 8096, 28, 67, 60, 32},
				{2097446912, 14168, 4048, 2, 0, 2, 4, 40, 48, 2024, 40, 48, 80, 96, 2, 8, 6, 7, 6, 0, 3, 2},
			},
		},
		{
			name:  "full",
			input: []int{0, 89741, 316108, 7641, 756, 9, 7832357, 91},
			expected: [][]int{
				{1, 181635784, 316, 108, 76, 41, 1530144, 18216, 15852690568, 9, 1},
				{2024, 367630826816, 639584, 218592, 7, 6, 4, 1, 3097011456, 36869184, 32085845709632, 18216, 2024},
				{20, 24, 367630, 826816, 639, 584, 218, 592, 14168, 12144, 8096, 2024, 30970, 11456, 3686, 9184, 3208584, 5709632, 36869184, 20, 24},
				{2, 0, 2, 4, 367, 630, 826, 816, 1293336, 1182016, 441232, 1198208, 28676032, 24579456, 80, 96, 20, 24, 62683280, 23186944, 36, 86, 91, 84, 6494174016, 11556295168, 3686, 9184, 2, 0, 2, 4},
			},
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			stoneCounter := MakeStoneCounter(tc.input)
			for i, blink := range tc.expected {
				stoneCounter.Blink()
				numStones := stoneCounter.Total()
				expectedNumStones := len(blink)

				if numStones != expectedNumStones {
					t.Errorf("Expected %v for blink %v but got %v", expectedNumStones, i, numStones)
				}
			}
		})
	}
}
